# Generated by Django 5.2.5 on 2025-08-26 06:27

import django.db.models.deletion
import limeclicks.storage_backends
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('project', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScreamingFrogLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_key', models.CharField(help_text='Screaming Frog license key', max_length=255)),
                ('license_type', models.CharField(choices=[('free', 'Free (500 URLs)'), ('paid', 'Paid (Unlimited)')], default='free', max_length=50)),
                ('license_status', models.CharField(choices=[('valid', 'Valid'), ('expired', 'Expired'), ('invalid', 'Invalid')], default='valid', max_length=20)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_validated', models.DateTimeField(blank=True, null=True)),
                ('last_reminder_sent', models.DateTimeField(blank=True, help_text='Last time expiry reminder was sent', null=True)),
                ('max_urls', models.IntegerField(default=500, help_text='Maximum URLs allowed by license')),
                ('license_holder', models.CharField(blank=True, max_length=255, null=True)),
                ('license_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Screaming Frog License',
                'verbose_name_plural': 'Screaming Frog License',
                'db_table': 'screaming_frog_license',
            },
        ),
        migrations.CreateModel(
            name='SiteAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_frequency_days', models.IntegerField(default=30, help_text='Days between automatic audits (minimum 30)')),
                ('manual_audit_frequency_days', models.IntegerField(default=3, help_text='Days between manual audits (minimum 3)')),
                ('is_audit_enabled', models.BooleanField(default=True, help_text='Enable/disable automatic audits')),
                ('max_pages_to_crawl', models.IntegerField(default=500, help_text='Maximum pages to crawl per audit')),
                ('last_automatic_audit', models.DateTimeField(blank=True, null=True)),
                ('last_manual_audit', models.DateTimeField(blank=True, null=True)),
                ('next_scheduled_audit', models.DateTimeField(blank=True, null=True)),
                ('last_audit_date', models.DateTimeField(blank=True, null=True)),
                ('broken_links_count', models.IntegerField(default=0)),
                ('redirect_chains_count', models.IntegerField(default=0)),
                ('missing_titles_count', models.IntegerField(default=0)),
                ('duplicate_titles_count', models.IntegerField(default=0)),
                ('missing_meta_descriptions_count', models.IntegerField(default=0)),
                ('duplicate_meta_descriptions_count', models.IntegerField(default=0)),
                ('blocked_by_robots_count', models.IntegerField(default=0)),
                ('missing_hreflang_count', models.IntegerField(default=0)),
                ('duplicate_content_count', models.IntegerField(default=0)),
                ('spelling_errors_count', models.IntegerField(default=0)),
                ('total_issues_count', models.IntegerField(default=0)),
                ('average_page_size_kb', models.FloatField(blank=True, null=True)),
                ('average_load_time_ms', models.FloatField(blank=True, null=True)),
                ('total_pages_crawled', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='site_audit', to='project.project')),
            ],
            options={
                'verbose_name': 'On-Page Audit',
                'verbose_name_plural': 'On-Page Audits',
                'db_table': 'site_audits',
            },
        ),
        migrations.CreateModel(
            name='OnPagePerformanceHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('trigger_type', models.CharField(choices=[('scheduled', 'Scheduled'), ('manual', 'Manual'), ('project_created', 'Project Created')], default='manual', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('pages_crawled', models.IntegerField(default=0)),
                ('max_pages_limit', models.IntegerField(default=500)),
                ('crawl_depth', models.IntegerField(default=10)),
                ('summary_data', models.JSONField(blank=True, null=True)),
                ('issues_summary', models.JSONField(blank=True, null=True)),
                ('issues_fixed', models.IntegerField(default=0)),
                ('issues_introduced', models.IntegerField(default=0)),
                ('total_issues', models.IntegerField(default=0)),
                ('full_report_json', models.FileField(blank=True, help_text='Full Screaming Frog JSON report', null=True, storage=limeclicks.storage_backends.CloudflareR2Storage(), upload_to='onpage/')),
                ('crawl_report_csv', models.FileField(blank=True, help_text='Screaming Frog CSV export', null=True, storage=limeclicks.storage_backends.CloudflareR2Storage(), upload_to='onpage/')),
                ('issues_report_json', models.FileField(blank=True, help_text='Processed issues report', null=True, storage=limeclicks.storage_backends.CloudflareR2Storage(), upload_to='onpage/')),
                ('error_message', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('audit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_history', to='site_audit.siteaudit')),
            ],
            options={
                'verbose_name': 'On-Page Audit History',
                'verbose_name_plural': 'On-Page Audit Histories',
                'db_table': 'onpage_performance_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SiteIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_type', models.CharField(choices=[('broken_link', 'Broken Link (4xx/5xx)'), ('redirect_chain', 'Redirect Chain'), ('missing_title', 'Missing Title'), ('duplicate_title', 'Duplicate Title'), ('title_too_long', 'Title Too Long'), ('title_too_short', 'Title Too Short'), ('missing_meta_description', 'Missing Meta Description'), ('duplicate_meta_description', 'Duplicate Meta Description'), ('meta_description_too_long', 'Meta Description Too Long'), ('meta_description_too_short', 'Meta Description Too Short'), ('blocked_by_robots', 'Blocked by Robots'), ('noindex_page', 'Noindex Page'), ('missing_hreflang', 'Missing Hreflang'), ('invalid_hreflang', 'Invalid Hreflang'), ('duplicate_content', 'Duplicate Content'), ('near_duplicate', 'Near Duplicate Content'), ('spelling_error', 'Spelling/Grammar Error'), ('missing_h1', 'Missing H1'), ('multiple_h1', 'Multiple H1 Tags'), ('missing_alt_text', 'Missing Alt Text'), ('page_too_large', 'Page Too Large'), ('slow_page', 'Slow Loading Page'), ('orphan_page', 'Orphan Page')], max_length=50)),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('info', 'Info')], default='medium', max_length=20)),
                ('page_url', models.URLField(max_length=2000)),
                ('page_title', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.TextField()),
                ('recommendation', models.TextField(blank=True, null=True)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('page_size_bytes', models.IntegerField(blank=True, null=True)),
                ('duplicate_urls', models.JSONField(blank=True, null=True)),
                ('similarity_score', models.FloatField(blank=True, null=True)),
                ('source_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('anchor_text', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performance_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='site_audit.onpageperformancehistory')),
            ],
            options={
                'verbose_name': 'On-Page Issue',
                'verbose_name_plural': 'On-Page Issues',
                'db_table': 'onpage_issues',
            },
        ),
        migrations.AddIndex(
            model_name='siteaudit',
            index=models.Index(fields=['next_scheduled_audit'], name='site_audits_next_sc_012de4_idx'),
        ),
        migrations.AddIndex(
            model_name='siteaudit',
            index=models.Index(fields=['is_audit_enabled', 'next_scheduled_audit'], name='site_audits_is_audi_3d8674_idx'),
        ),
        migrations.AddIndex(
            model_name='onpageperformancehistory',
            index=models.Index(fields=['audit', '-created_at'], name='onpage_perf_audit_i_e64cb7_idx'),
        ),
        migrations.AddIndex(
            model_name='onpageperformancehistory',
            index=models.Index(fields=['status', 'created_at'], name='onpage_perf_status_12d92a_idx'),
        ),
        migrations.AddIndex(
            model_name='siteissue',
            index=models.Index(fields=['performance_history', 'issue_type'], name='onpage_issu_perform_c40509_idx'),
        ),
        migrations.AddIndex(
            model_name='siteissue',
            index=models.Index(fields=['severity'], name='onpage_issu_severit_085aae_idx'),
        ),
        migrations.AddIndex(
            model_name='siteissue',
            index=models.Index(fields=['page_url'], name='onpage_issu_page_ur_5d6ed5_idx'),
        ),
    ]
