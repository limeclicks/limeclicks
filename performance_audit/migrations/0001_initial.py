# Generated by Django 5.2.5 on 2025-08-26 06:27

import django.core.validators
import django.db.models.deletion
import limeclicks.storage_backends
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('project', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformancePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_url', models.URLField(help_text='URL of the page to audit (defaults to project domain home page)', max_length=500)),
                ('last_audit_date', models.DateTimeField(blank=True, null=True)),
                ('next_scheduled_audit', models.DateTimeField(blank=True, null=True)),
                ('performance_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('accessibility_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('best_practices_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('seo_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pwa_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('audit_frequency_days', models.IntegerField(default=30, help_text='Days between automatic audits')),
                ('is_audit_enabled', models.BooleanField(default=True, help_text='Enable/disable automatic audits for this page')),
                ('last_manual_audit', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_page', to='project.project')),
            ],
            options={
                'verbose_name': 'Audit Page',
                'verbose_name_plural': 'Audit Pages',
                'db_table': 'performance_pages',
            },
        ),
        migrations.CreateModel(
            name='PerformanceHistory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], db_index=True, default='pending', max_length=20)),
                ('trigger_type', models.CharField(choices=[('scheduled', 'Scheduled'), ('manual', 'Manual'), ('project_created', 'Project Created'), ('webhook', 'Webhook')], default='manual', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('task_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile')], default='desktop', max_length=20)),
                ('performance_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('accessibility_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('best_practices_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('seo_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pwa_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('first_contentful_paint', models.FloatField(blank=True, help_text='FCP in seconds', null=True)),
                ('largest_contentful_paint', models.FloatField(blank=True, help_text='LCP in seconds', null=True)),
                ('time_to_interactive', models.FloatField(blank=True, help_text='TTI in seconds', null=True)),
                ('speed_index', models.FloatField(blank=True, help_text='Speed Index in seconds', null=True)),
                ('total_blocking_time', models.FloatField(blank=True, help_text='TBT in milliseconds', null=True)),
                ('cumulative_layout_shift', models.FloatField(blank=True, help_text='CLS score', null=True)),
                ('json_report', models.FileField(blank=True, help_text='Full Lighthouse JSON report', null=True, storage=limeclicks.storage_backends.AuditJSONStorage(), upload_to='')),
                ('html_report', models.FileField(blank=True, help_text='HTML report for viewing', null=True, storage=limeclicks.storage_backends.AuditHTMLStorage(), upload_to='')),
                ('performance_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_history', to='performance_audit.performancepage')),
            ],
            options={
                'verbose_name': 'Audit History',
                'verbose_name_plural': 'Audit Histories',
                'db_table': 'performance_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_for', models.DateTimeField()),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('performance_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='performance_audit.performancepage')),
            ],
            options={
                'db_table': 'performance_schedules',
            },
        ),
        migrations.AddIndex(
            model_name='performancepage',
            index=models.Index(fields=['next_scheduled_audit'], name='performance_next_sc_a34bf3_idx'),
        ),
        migrations.AddIndex(
            model_name='performancepage',
            index=models.Index(fields=['is_audit_enabled', 'next_scheduled_audit'], name='performance_is_audi_61d603_idx'),
        ),
        migrations.AddIndex(
            model_name='performancehistory',
            index=models.Index(fields=['performance_page', '-created_at'], name='performance_perform_68d0b3_idx'),
        ),
        migrations.AddIndex(
            model_name='performancehistory',
            index=models.Index(fields=['status', 'created_at'], name='performance_status_52a8a4_idx'),
        ),
        migrations.AddIndex(
            model_name='performancehistory',
            index=models.Index(fields=['device_type', '-created_at'], name='performance_device__94873f_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceschedule',
            index=models.Index(fields=['scheduled_for', 'is_processed'], name='performance_schedul_b2e217_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='performanceschedule',
            unique_together={('performance_page', 'scheduled_for')},
        ),
    ]
