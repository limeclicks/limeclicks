# Generated by Django 5.2.5 on 2025-08-26 12:36

import django.core.validators
import limeclicks.storage_backends
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('performance_audit', '0002_performancehistory_console_errors_and_more'),
    ]

    operations = [
        migrations.RemoveIndex(
            model_name='performancehistory',
            name='performance_device__94873f_idx',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='accessibility_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='best_practices_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='console_errors',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='css_errors',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='cumulative_layout_shift',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='device_type',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='error_report',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='first_contentful_paint',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='first_input_delay',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='html_report',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='interaction_to_next_paint',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='js_errors',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='json_report',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='largest_contentful_paint',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='network_errors',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='overall_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='performance_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='pwa_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='seo_score',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='speed_index',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='time_to_first_byte',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='time_to_interactive',
        ),
        migrations.RemoveField(
            model_name='performancehistory',
            name='total_blocking_time',
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='consolidated_error_report',
            field=models.FileField(blank=True, help_text='Consolidated error report JSON for both devices', null=True, storage=limeclicks.storage_backends.AuditJSONStorage(), upload_to=''),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_accessibility_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_best_practices_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_console_errors',
            field=models.JSONField(blank=True, default=list, help_text='Console errors found on desktop'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_css_errors',
            field=models.JSONField(blank=True, default=list, help_text='CSS errors found on desktop'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_cumulative_layout_shift',
            field=models.FloatField(blank=True, help_text='CLS score', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_first_contentful_paint',
            field=models.FloatField(blank=True, help_text='FCP in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_first_input_delay',
            field=models.FloatField(blank=True, help_text='FID in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_html_report',
            field=models.FileField(blank=True, help_text='Desktop HTML report for viewing', null=True, storage=limeclicks.storage_backends.AuditHTMLStorage(), upload_to=''),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_interaction_to_next_paint',
            field=models.FloatField(blank=True, help_text='INP in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_js_errors',
            field=models.JSONField(blank=True, default=list, help_text='JavaScript errors found on desktop'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_json_report',
            field=models.FileField(blank=True, help_text='Desktop Lighthouse JSON report', null=True, storage=limeclicks.storage_backends.AuditJSONStorage(), upload_to=''),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_largest_contentful_paint',
            field=models.FloatField(blank=True, help_text='LCP in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_network_errors',
            field=models.JSONField(blank=True, default=list, help_text='Network/resource errors found on desktop'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_overall_score',
            field=models.IntegerField(blank=True, help_text='Average of all desktop category scores', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_performance_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_pwa_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_seo_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_speed_index',
            field=models.FloatField(blank=True, help_text='Speed Index in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_time_to_first_byte',
            field=models.FloatField(blank=True, help_text='TTFB in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_time_to_interactive',
            field=models.FloatField(blank=True, help_text='TTI in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='desktop_total_blocking_time',
            field=models.FloatField(blank=True, help_text='TBT in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_accessibility_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_best_practices_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_console_errors',
            field=models.JSONField(blank=True, default=list, help_text='Console errors found on mobile'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_css_errors',
            field=models.JSONField(blank=True, default=list, help_text='CSS errors found on mobile'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_cumulative_layout_shift',
            field=models.FloatField(blank=True, help_text='CLS score', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_first_contentful_paint',
            field=models.FloatField(blank=True, help_text='FCP in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_first_input_delay',
            field=models.FloatField(blank=True, help_text='FID in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_html_report',
            field=models.FileField(blank=True, help_text='Mobile HTML report for viewing', null=True, storage=limeclicks.storage_backends.AuditHTMLStorage(), upload_to=''),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_interaction_to_next_paint',
            field=models.FloatField(blank=True, help_text='INP in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_js_errors',
            field=models.JSONField(blank=True, default=list, help_text='JavaScript errors found on mobile'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_json_report',
            field=models.FileField(blank=True, help_text='Mobile Lighthouse JSON report', null=True, storage=limeclicks.storage_backends.AuditJSONStorage(), upload_to=''),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_largest_contentful_paint',
            field=models.FloatField(blank=True, help_text='LCP in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_network_errors',
            field=models.JSONField(blank=True, default=list, help_text='Network/resource errors found on mobile'),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_overall_score',
            field=models.IntegerField(blank=True, help_text='Average of all mobile category scores', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_performance_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_pwa_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_seo_score',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_speed_index',
            field=models.FloatField(blank=True, help_text='Speed Index in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_time_to_first_byte',
            field=models.FloatField(blank=True, help_text='TTFB in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_time_to_interactive',
            field=models.FloatField(blank=True, help_text='TTI in seconds', null=True),
        ),
        migrations.AddField(
            model_name='performancehistory',
            name='mobile_total_blocking_time',
            field=models.FloatField(blank=True, help_text='TBT in milliseconds', null=True),
        ),
    ]
